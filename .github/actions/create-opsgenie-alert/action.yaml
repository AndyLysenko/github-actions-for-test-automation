name: Create alert in OpsGenie
description: Create alert in OpsGenie using Alert REST API
inputs:
  message:
    description: Message of the alert
    required: true
  alias:
    description: Client-defined identifier of the alert
  description:
    description: Description field of the alert that is generally used to provide a detailed information about the alert
  responders:
    description: Teams, users, escalations and schedules that the alert will be routed to send notifications
  visible-to:
    description: Teams and users that the alert will become visible to without sending any notification
  actions:
    description: Custom actions that will be available for the alert
  tags:
    description: Tags of the alert
  details:
    description: Map of key-value pairs to use as custom properties of the alert
  entity:
    description: Entity field of the alert that is generally used to specify which domain alert is related to
  source:
    description: Source field of the alert. Default value is IP address of the incoming request
  priority:
    description: Priority level of the alert. Possible values are P1, P2, P3, P4 and P5. Default value is P3
    default: P3
  user:
    description: Display name of the request owner
  note:
    description: Additional note that will be added while creating the alert
  opsgenie-api-key:
    description: API key for specific OpsGenie integration
    required: true
  use-eu-opsgenie-instance:
    description: Whether to use EU OpsGenie instance or not. EU instance a has slightly different URL
    type: boolean

runs:
  using: composite
  steps:
    - name: Create alert
      shell: bash
      run: |
        # Build input
        RESPONDERS="${{inputs.responders}}"
        VISIBLETO="${{inputs.visible-to}}"
        ACTIONS="${{inputs.actions}}"
        TAGS="${{inputs.tags}}"
        DETAILS="${{inputs.details}}"

        HOST="api.opsgenie.com"
        if [[ -n "${{inputs.use-eu-opsgenie-instance}}" ]]; then
          HOST="api.eu.opsgenie.com"
        fi

        # Make sure an acceptable priority level was defined
        if [[ "P1" != "${{inputs.priority}}" ]] && [[ "P2" != "${{inputs.priority}}" ]] && [[ "P3" != "${{inputs.priority}}" ]] && [[ "P4" != "${{inputs.priority}}" ]] && [[ "P5" != "${{inputs.priority}}" ]]; then
            echo "ERROR: An invalid alert priority level (${{inputs.priority}}}) was set, it must be one of the valid OpsGenie alert levels (P1-P5)"
            exit 2;
        fi

        # Send alert via curl request to OpsGenie API
        STATUS_CODE=$(curl -s \
            -o response.txt \
            -w '%{http_code}' \
            -X POST "https://${HOST}/v2/alerts" \
            -H "Host: ${HOST}" \
            -H "Authorization: GenieKey ${{inputs.opsgenie-api-key}}" \
            -H "User-Agent: GitHub_Actions/1.0.0" \
            -H "cache-control: no-cache" \
            -H "Content-Type: application/json" \
            -d "{
                \"message\": \"${{inputs.message}}\",
                \"alias\": \"${{inputs.alias}}\",
                \"description\": \"${{inputs.description}}\",
                \"responders\": ${RESPONDERS:-null},
                \"visibleTo\": ${VISIBLETO:-null},
                \"tags\": ${TAGS:-null},
                \"details\": ${DETAILS:-null},
                \"entity\": \"${{inputs.entity}}\",
                \"source\": \"${{inputs.source}}\",
                \"priority\": \"${{inputs.priority}}\",
                \"user\": \"${{inputs.user}}\",
                \"note\": \"${{inputs.note}}\"
                }")

        # Validate status code
        if [ "${STATUS_CODE}" != "200" ] && [ "${STATUS_CODE}" != "201" ] && [ "${STATUS_CODE}" != "202" ]
        then
            echo "ERROR: HTTP response code ${STATUS_CODE} received, expected HTTP 200-202."
            exit 1
        else
            echo "Alert successfully posted. HTTP response code ${STATUS_CODE} received."
            cat response.txt
        fi
